Ανάπτυξη Λογισμικού για Αλγοριθμικά Προβλήματα Εργασία 2

Ονοματεπώνυμο: Άγγελος Κόντος
SDI: 1115202000089
Ονοματεπώνυμο: Σοφία Κυριακή Μάχαιρα
SDI: 1115202000125

Η εντολή για την μεταγλώττιση του προγράμματος είναι: make all. 
Η make all μεταγλωττίζει και τα νέα LSH ή Hypercube τα οποία είναι πλέον ταχύτερα.
Διαγράφονται με την εντολή make clean. Εκτελούνται μέσω των εντολών που αναφέρονται στην εκφώνηση.
Τα αρχεία κώδικα είναι: main2.cpp με τη συνάρτηση main της εργασίας με αντίστοιχο header.h αρχείο επικεφαλίδας.
Κοινή επικεφαλίδα για κάθε αρχείο η common.h όπου ορίζεται struct στο οποίο αποθηκεύεται η θέση (στο αρχικό input.dat) και η ευκλείδια απόσταση ενός σημείου.
Μετά αρχεία με αντίστοιχη επικεφαλίδα LSH.cpp και LSH.h, Hypercube.cpp, Hypercube.h, GNNS.cpp, GNNS.h, MRNG.cpp, MRNG.h BruteForce.h, BruteForce.cpp.

Για το BruteForce:
Ίδιο με την πρώτη εργασία.

Για το LSH:
Όμοιο με της πρώτης εργασίας αλλά με χρήση vectors για τα buckets των G και ID αντίστοιχα για ταχύτερη υλοποίηση.
Η χρήση τους αντικαθιστά τη χρήση vector::count() στην υλοποίηση της πρώτης εργασίας, η οποία είναι πολύ αργή.

Για το Hypercube:
Όμοιο με της πρώτης εργασίας αλλά με τροποποίηση για βελτίωση χρόνου και πρόληψη άδειων buckets μέσω χρήσης vector.
Αντί για σύγκριση κάθε bit ένα προς ένα, γίνεται μετατροπή σε δεκαδικό έτσι ώστε να μπορούμε να κάνουμε αναζήτηση.
Υλοποιήθηκαν 2 συναρτήσεις (FindProbe, ProbeSearch) όπου η μία βρίσκει τους γείτονες με αναδρομή μέχρι τη τελευταία αλλαγή κι μετά αναζήτηση εντός κάθε probe.

Για το GNNS:
Ακολουθούνται οι οδηγίες από τους ψευδοκώδικες των διαφανειών. 
Χρησιμοποιείται ως default η μέθοδος LSH. Για αλλαγή σε Hypercube αρκεί να προστεθεί η εντολή #include "Hypercube.h"
και να ανταλλαχτεί η εντολή της γραμμής 41 με την εντολή (σε σχόλιο) στη γραμμή 42 στο GNNS.cpp. 
Γίνεται μεταγλώττιση της παραπάνω αλλαγής με make graph_searchcube.
Κατά τη δημιουργία του γράφου (GraphCreate), δημιουργείται αντίστοιχο αρχείο gnnsgraph.txt στο οποίο είναι αποθηκευμένος.
Αν ξανατρέξει ο αλγόριθμος δημιουργίας γράφου, θα λάβει τις τιμές από το έτοιμο αρχείο αυτό χωρίς να γίνεται επαναϋπολογισμός.
Προσοχή: Πρέπει να σβηστεί το αρχείο κειμένου αν είναι επιθυμητή η δημιουργία γράφου με άλλο database πριν την εκτέλεση.
Ο αλγόριθμος GNNS (GraphNNSearch) ακολουθεί τις διαφάνειες και σταματά αν το Τ υπερβεί την ενδεικτική τιμή (από το φροντιστήριο) 50 ή αν έχουμε βελτιώσεις στην απόσταση γείτονα μικρότερες του 0.1%.

Για το MRNG:
Ακολουθούνται οι οδηγίες από τους ψευδοκώδικες των διαφανειών. 
Κατά τη δημιουργία του γράφου (GraphCreate), δημιουργείται αντίστοιχο αρχείο mrnggraph.txt στο οποίο είναι αποθηκευμένος.
Αν ξανατρέξει ο αλγόριθμος δημιουργίας γράφου, θα λάβει τις τιμές από το έτοιμο αρχείο αυτό χωρίς να γίνεται επαναϋπολογισμός.
Προσοχή: Πρέπει να σβηστεί το αρχείο κειμένου αν είναι επιθυμητή η δημιουργία γράφου με άλλο database πριν την εκτέλεση.
Ο αλγόριθμος Search On Graph ακολουθεί τις διαφάνειες και αξιοποιεί vector με αντικείμενα τύπου struct POINTDISTANCECHECK.
To struct αυτό περιέχει τη πληροφορία του index του σημείου στο database, την απόστασή του από το σημείο που μας αφορά κάθε φορά
και τη μεταβλητή "checked" για το αν έχει ήδη ελεγχθεί ή όχι.

Για τη Main:
Λαμβάνει τις τιμές των παραμέτρων από τη γραμμή εντολών. Αν δε δωθούν, λαμβάνουν τις default τιμές. Αν δε δωθεί όνομα για κάθε αρχείο που πρέπει να ανοιχθεί, το ζητά από τον χρήστη. 
Δημιουργεί αρχείο εξόδου, υπολογίζει Maximum Approximation Factor και μέσους χρόνους υλοποίησης και γράφει στο αρχείο εξόδου όσα ζητούνται.
Το MAF είναι ένα και δείχνει τη μεγαλύτερη απόκλιση που υπήρξε μεταξύ αποτελέσματος γράφου και brute force από όλα τα query.
Στο τέλος, ο χρήστης μπορεί να ξανατρέξει τη διαδικασία για διαφορετικό σύνολο/αρχείο αναζήτησης ή διαφορετικό αρχείο εξόδου αν πληκτρολογήσει 1 ή αλλιώς 0 για να ολοκληρωθεί.

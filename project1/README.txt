Ανάπτυξη Λογισμικού για Αλγοριθμικά Προβλήματα Εργασία 1

Ονοματεπώνυμο: Άγγελος Κόντος
SDI: 1115202000089
Ονοματεπώνυμο: Σοφία Κυριακή Μάχαιρα
SDI: 1115202000125

Η εντολή για την μεταγλώττιση του προγράμματος είναι: make all. Μόνο για το LSH είναι η make lsh, για τον υπερκύβο η make cube, για το Β μέρος η make cluster.
Διαγράφονται με την εντολή make clean. Εκτελούνται μέσω των εντολών που αναφέρονται στην εκφώνηση.

Τα αρχεία κώδικα είναι: main.cpp με τη συνάρτηση main της εργασίας με αντίστοιχο header.h αρχείο επικεφαλίδας.
Κοινή επικεφαλίδα για κάθε αρχείο η common.h όπου ορίζεται struct στο οποίο αποθηκεύεται η θέση (στο αρχικό input.dat) και η ευκλείδια απόσταση ενός σημείου.
Μετά αρχεία με αντίστοιχη επικεφαλίδα LSH.cpp και LSH.h, Hypercube.cpp, Hypercube.h, CentralClustering.cpp, CentralClustering.h, BruteForce.h, BruteForce.cpp.

Για το BruteForce:
  Γίνεται εξαντλητική αναζήτηση κοντινότερων γειτόνων και αναζήτησης περιοχής.
Κατά τη δημιουργία object τύπου κλάσης BRUTEFORCE δημιουργείται αντίγραφο του κάθε σημείου, το οποίο ελευθερώνεται στον destructor.
Με τη κλήση των συναρτήσεων NNearestNeighbors και RangeSearch για το κάθε query, επιστρέφεται vector στο οποίο είναι αποθηκεύμενα η θέση και η ευκλείδια απόσταση για κάθε σημείο του τελικού αποτελέσματος (τύπος struct POINTDISTANCE).
Η ίδια τακτική ακολουθείται και σε κάθε άλλο αρχείο.

Για το LSH:
  Ακολουθώντας τις οδηγίες της εκφώνησης, κατά την κλήση του δημιουργεί τις συναρτήσεις h, id, g και χρησιμοποιεί το querying trick.
Στους κοντινότερους γείτονες βρίσκει μόνο όσους έχουν ίδιο g ή id, υπολογίζει απόσταση, τους ταξινομέι και επιστροφεί τους Ν κοντινότερους.
Ομοίως στην αναζήτηση περιοχής αλλά αναζητεί μόνο ίδιο g και να είναι εντός ακτίνας.

Για το Hypercube:
  Αρχικοποιήση, NNearestNeighbors, RangeSearch όπως στο LSH με τροποποιήσεις.
Η συνάρτηση CheckH10 ελέγχει αν κάποια f έχει ήδη υπολογιστεί, αλλιώς θέτει στην f αυτή τη τιμή 0 ή 1 αντίστοιχα.
Στους αλγορίθμους ελέγχεται και ότι δεν ξεπερνιέται το όριο που θέτουν οι παράμετροι M, probes.

Για το CentralClustering:
  Αρχικοποίηση μέσω constructor, κλήση της συνάρτησης Initialization η οποία υλοποιεί το KMeans++ με τυχαιότητα/πιθανότητες.
Ενημέρωση της βάσης μέσω της μεθόδου MacQueen εντός των συναρτήσεων Classic (Lloyds) και Reverse αντίστοιχα.
Στο Classic γίνεται επανάληψη για περιορισμένες φορές (ορισμένες μέσω μακροεντολής) ή μέχρι να μην υπάρχουν άλλες αλλαγές στα κέντρα  (ή μικρότερη από 10% αλλαγή) και βρίσκει για κάθε σημείο το κοντινότερό του κέντρο.
Αποθηκεύεται και ελέγχει αν το νέο κέντρο είναι διαφορετικό από το προηγούμενο, αν ναι ξαναβρίσκονται οι ευκλείδιες αποστάσεις.
Στο Reverse βρίσκεται η μικρότερη απόσταση μεταξύ των κέντρων για να οριστεί η ακτίνα της πρώτης αναζήτησης περιοχής.
Αποθηκεύεται αντίγραφο των σημείων (το οποίο θα μειώνεται σταδιακά).
Στην επανάληψη κάνουμε αναζητήσεις περιοχής (LSH ή Υπερκύβο αντίστοιχα).
Αν έχουν κοινά σημεία διαφορετικά κεντρα, βρίσκεται σε ποιο κέντρο είναι πιο κοντά κι αποθηκεύεται μόνο σε αυτό.
Αφαιρούνται τα σημεία αυτά μέσω δημιουργίας νέου μειωμένου αντιγράφου σημείου.
Μετά την επανάληψη αν κάποια σημεία δεν έχουν μπει, βρίσκεται η ευκλείδια απόστασή τους για να τοποθετηθούν.
Υπολογισμός σιλουέτας και αντίστοιχη εκτύπωση στο αρχείο εξόδου.

Για τη Main:
  Λαμβάνει τις τιμές των παραμέτρων από τη γραμμή εντολών. Αν δε δωθούν, λαμβάνουν τις default τιμές. Αν δε δωθεί όνομα για κάθε αρχείο που πρέπει να ανοιχθεί, το ζητά από τον χρήστη.
Ανάλογα την εντολή μεταγλώττισης, μέσω των #ifdef παίρνει τα απαραίτητα αρχεία επικεφαλίδας και τρέχει τον αντίστοιχο κώδικα.
Έτσι, η ίδια main αξιοποιείται πάντα. Δημιουργεί και γράφει στο αρχείο εξόδου και στο τέλος, ο χρήστης μπορεί να ξανατρέξει τη διαδικασία για διαφορετικό σύνολο/αρχείο αναζήτησης αν πληκτρολογήσει 1 ή αλλιώς 0 για να ολοκληρωθεί.
